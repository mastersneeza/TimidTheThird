program         ->      declaration*    ;

declaration     ->      '$' IDENTIFIER ( '=' expr )?
                    |   statement   ;

statement       ->      '|-' expr expr? 
                    |   '{' declaration* '}'
                    |   'break' | 'continue'
                    |   expr
                    |   'for' declaration? ',' expr? ',' expr? statement
                    |   'forever' statement
                    |   'goto' IDENTIFIER
                    |   'if' expr statement ( 'else' statement )?
                    |   'print' expr?
                    |   'while' expr statement  ;

expr            ->  assignment  ;

assignment      ->  ternary ( ( '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '^=' ) assignment )?   ;

ternary         ->  or_expr ( '?' expr ':' expr )?  ;

or_expr         ->  and_expr ( 'or' and_expr )*    ;

and_expr        ->  equality ( 'and' equality )*   ;

equality        -> comparison ( ( '==' | '!=' ) comparison )*    ;

comparison      -> sum  ( ( '<' | '<=' | '>' | '>=' ) sum )*   ;

sum             -> term ( ( '+' | '-' ) term )*    ;

term            -> unary ( ( '*' | '/' | '%' ) unary)*  ;

unary           -> ( '-' | '+' | '!' ) unary
                |   power   ;

power           -> factorial ( '^' unary)*   ;

factorial       -> call '!'*    ;

call            -> atom ( ( '[' expr ']' ) )* ;

atom            -> '(' expr ')'
                |   'in' expr?
                |   INT
                |   FLOAT
                |   STRING
                |   'tru'
                |   'fls'
                |   'nul'
                |   IDENTIFIER ':'?

FLOAT           -> INT '.' INT  ;

INT             -> [0-9]+   ;

IDENTIFIER      -> [A-Za-z_][A-Za-z0-9_]*   ;

STRING          -> ('"' | ''') (any ascii character including escape)* ('"' | ''')  ;
